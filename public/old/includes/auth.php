<?php
session_start();
/*
* Generate a secure hash for a given password. The cost is passed
* to the blowfish algorithm. Check the PHP manual page for crypt to
* find more information about this setting.
*/
function generate_hash($password, $cost=11){
        /* To generate the salt, first generate enough random bytes. Because
         * base64 returns one character for each 6 bits, the we should generate
         * at least 22*6/8=16.5 bytes, so we ><i 17. Then we get the first
         * 22 base64 characters
         */
        $salt=substr(base64_encode(openssl_random_pseudo_bytes(17)),0,22);
        /* As blowfish takes a salt with the alphabet ./A-Za-z0-9 we have to
         * replace any '+' in the base64 string with '.'. We don't have to do
         * anything about the '=', as this only occurs when the b64 string is
         * padded, which is always after the first 22 characters.
         */
        $salt=str_replace("+",".",$salt);
        /* Next, create a string that will be passed to crypt, containing all
         * of the settings, separated by dollar signs
         */
        $param='$'.implode('$',array(
                "2y", //select the most secure version of blowfish (>=PHP 5.3.7)
                str_pad($cost,2,"0",STR_PAD_LEFT), //add the cost in two digits
                $salt //add the salt
        ));
      
        //now do the actual hashing
        return crypt($password,$param);
}

/*
* Check the password against a hash generated by the generate_hash
* function.
*/
function validate_pw($password, $hash){
        /* Regenerating the with an available hash as the options parameter should
         * produce the same hash if the same password is passed.
         */
        return crypt($password, $hash)==$hash;
}
$authdb = new SQLite3('../database/admin.sqlite'); 

// username and password sent from form
$myusername=$_REQUEST['myusername'];
$mypassword=$_REQUEST['mypassword'];

// To protect MySQL injection (more detail about MySQL injection)
$myusername = stripslashes($myusername);
$myusername = strtolower($myusername);
$mypassword = stripslashes($mypassword);
$authsql = "SELECT * FROM users WHERE username='$myusername'";
$result = $authdb->query($authsql)->fetchArray(SQLITE3_ASSOC); 
$valid_login = validate_pw($mypassword, $result["password"]);
$authdb->close();
unset($authdb);
// Mysql_num_row is counting table row


// If result matched $myusername and $mypassword, table row must be 1 row

if($valid_login){

// Register $myusername, $mypassword and redirect to file "login_success.php"
$_SESSION["myusername"]=$myusername;
$_SESSION["group_id"]=$result["group_id"];
header("location:../index.php");

}
else {
$_SESSION["invalid"]="invalid";
header("location:../index.php");
}
?>